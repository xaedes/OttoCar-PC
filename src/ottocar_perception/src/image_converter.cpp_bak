#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

//TODO: Sync depth and rgb image + topview

   static const std::string OPENCV_WINDOW_rgb = "Image window rgb";
   static const std::string OPENCV_WINDOW_depth = "Image window depth";
   float depth_min_range = 0.0;
   float depth_max_range = 5.0;
    
   class ImageConverter
   {
     ros::NodeHandle nh_;
     image_transport::ImageTransport it_;
     image_transport::Subscriber image_sub_rgb;
     image_transport::Publisher image_pub_rgb;
     image_transport::Subscriber image_sub_depth;
     image_transport::Publisher image_pub_depth;
     cv::Mat depth_img_mono8;
     cv::Mat rgb_img;
   
   public:
     ImageConverter()
       : it_(nh_)
     {
       // Subscrive to input video feed and publish output video feed
       image_sub_rgb = it_.subscribe("/camera/rgb/image_color", 1, &ImageConverter::imageCb_rgb, this);
       image_pub_rgb = it_.advertise("/image_converter/image_rgb", 1);
       
       image_sub_depth = it_.subscribe("/camera/depth/image", 1, &ImageConverter::imageCb_depth, this);
       image_pub_depth = it_.advertise("/image_converter/image_depth", 1);
   
       cv::namedWindow(OPENCV_WINDOW_rgb);
       cv::namedWindow(OPENCV_WINDOW_depth);
     }
   
     ~ImageConverter()
     {
       cv::destroyWindow(OPENCV_WINDOW_rgb);
       cv::destroyWindow(OPENCV_WINDOW_depth);
    }
   
     void imageCb_rgb(const sensor_msgs::ImageConstPtr& msg)
     {
       cv_bridge::CvImagePtr cv_ptr;
       try
       {
         cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
       }
       catch (cv_bridge::Exception& e)
       {
         ROS_ERROR("cv_bridge exception: %s", e.what());
         return;
       }
       
       rgb_img = cv::Mat(cv_ptr->image.size(), CV_8UC3);
       cv_ptr->image.copyTo(rgb_img);
       cv::imwrite("rgb_img.jpg", rgb_img);
   
       // Draw an example circle on the video stream
       //if (cv_ptr->image.rows > 60 && cv_ptr->image.cols > 60)
         //cv::circle(cv_ptr->image, cv::Point(50, 50), 10, CV_RGB(255,0,0));
   
       // Update GUI Window
       cv::imshow(OPENCV_WINDOW_rgb, rgb_img);
       cv::waitKey(3);
       
       // Output modified video stream
       image_pub_rgb.publish(cv_ptr->toImageMsg());
     }
     
     void imageCb_depth(const sensor_msgs::ImageConstPtr& msg)
     {
       cv_bridge::CvImagePtr cv_ptr;
       try
       {
         cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::TYPE_32FC1);
       }
       catch (cv_bridge::Exception& e)
       {
         ROS_ERROR("cv_bridge exception: %s", e.what());
         return;
       }
       
       //rescale dept image for viewing it
       depthToCV8UC1(cv_ptr->image, depth_img_mono8, depth_min_range, depth_max_range);
       
       cv::imwrite("depth_img.jpg", depth_img_mono8);
   
       // Draw an example circle on the video stream
       //if (cv_ptr->image.rows > 60 && cv_ptr->image.cols > 60)
        // cv::circle(cv_ptr->image, cv::Point(50, 50), 10, CV_RGB(255,0,0));
   
       // Update GUI Window
       //cv::imshow(OPENCV_WINDOW_depth, cv_ptr->image);
       cv::imshow(OPENCV_WINDOW_depth, depth_img_mono8);
       cv::waitKey(3);
       
       // Output modified video stream
       image_pub_depth.publish(cv_ptr->toImageMsg());
     }
     
     void depthToCV8UC1(cv::Mat& float_img, cv::Mat& mono8_img, float min_range_, float max_range_)
     {
	//if(mono8_img.rows != float_img.rows || mono8_img.cols != float_img.cols){
	  mono8_img = cv::Mat(float_img.size(), CV_8UC1);
       
	//}
	//cv::convertScaleAbs(float_img, mono8_img, 50, 0.0);
	
	float* Di;
	char* Ii;
	float tmpVal;
	for(int i = 0; i < float_img.rows; i++)
	{
	  Di = float_img.ptr<float>(i);
	  Ii = mono8_img.ptr<char>(i);
	  for(int j = 0; j < float_img.cols; j++)
	  {   
	      tmpVal = (255*((Di[j]-min_range_)/(max_range_-min_range_)));
	      if(0 <= tmpVal && tmpVal <= 255)
	      {
		Ii[j] = (char) (255*((Di[j]-min_range_)/(max_range_-min_range_)));
	      }
	      else
	      {
		Ii[j] = (char) (0.0);
	      }  
	  }   
	}
	
     }
     
   };
   
   int main(int argc, char** argv)
   {
     ros::init(argc, argv, "image_converter");
     ImageConverter ic;
     ros::spin();
     return 0;
  } 
